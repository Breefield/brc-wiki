# LocalWiki Apache config file
# After modifying and saving, you may need to run these commands:
#     $ sudo a2ensite example.com
#     $ sudo /etc/init.d/apache2 reload

<VirtualHost *:8084>

    ServerAdmin {{ server_admin_email }}

    WSGIDaemonProcess localwiki processes=2 threads=15 maximum-requests=10000 user=www-data group=www-data display-name=%{GROUP}
    WSGIProcessGroup localwiki
    # For API Authorization header support
    WSGIPassAuthorization On

    WSGIScriptAlias / {{ localwiki_root }}/localwiki.wsgi

    CustomLog /var/log/apache2/access.log combined

</VirtualHost>

# Redirect HTTP -> HTTPS
<VirtualHost *:80>
    ServerName {{ public_hostname }}
    ServerAlias www.{{ public_hostname }}
    ServerAlias *.{{ public_hostname }}
    {% for domain in custom_domains %}
    ServerAlias {{ domain }}
    {% endfor %}

    ServerAdmin {{ server_admin_email }}

    # Redirect www -> no-www
    RewriteEngine on
    RewriteCond %{HTTPS} off
    RewriteRule (.*) https://{{ public_hostname }}%{REQUEST_URI} [R=301]
</VirtualHost>

<VirtualHost *:443>
    # Virtualhost for routing to either:
    #   1) Static assets, served via apache directly.
    #   2) Application URLs, proxied to varnish first.
    #      a) Varnish will then use localhost:8084
    #         to get the application content.

    ServerName {{ public_hostname }}
    ServerAlias www.{{ public_hostname }}
    ServerAlias *.{{ public_hostname }}
    {% for domain in custom_domains %}
    ServerAlias {{ domain }}
    {% endfor %}

    ServerAdmin {{ server_admin_email }}

    ##############################################################################
    # SSL settings, from https://wiki.mozilla.org/Security/Server_Side_TLS#Apache
    ##############################################################################
    SSLEngine on
	SSLCertificateFile /etc/apache2/ssl/{{ ssl_name }}/{{ ssl_cert }}
	SSLCertificateKeyFile /etc/apache2/ssl/{{ ssl_name }}/{{ ssl_key }}
    {% if ssl_intermediate %}SSLCACertificateFile /etc/apache2/ssl/{{ ssl_name }}/{{ ssl_intermediate }}{% endif %}

    SSLProtocol             all -SSLv2
    SSLCipherSuite          ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK
    SSLHonorCipherOrder     on
    SSLCompression          off

    # OCSP Stapling, only in httpd 2.3.3 and later
    # TODO: Use this once we're on a newer apache
    #SSLUseStapling          on
    #SSLStaplingResponderTimeout 5
    #SSLStaplingReturnResponderErrors off
    #SSLStaplingCache        shmcb:/var/run/ocsp(128000)

    # Enable this if your want HSTS (recommended, but be careful)
    # Header add Strict-Transport-Security "max-age=15768000"

    # Redirect www -> no-www
    RewriteEngine on
    RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
    RewriteRule ^(.*)$ http://%1$1 [R=301,L]

    # XXX TEMPORARY
    # TODO remove
    # mis-named regions
    RewriteRule ^/stl/(.*)$ http://localwiki.net/st-louis/$1 [R=301]

    # The media directory, which contains user-uploaded content, should be set
    # to force downloads. This is *extremely* important for security reasons.
    # Note: The /media/ directory must be writable by the www-data user
    Alias /media/ {{ data_root }}/media/
    <Location /media/>
        Header set Content-Disposition attachment
    </Location>

    Alias /static/ {{ data_root }}/static/
    Alias /robots.txt {{ data_root }}/static/robots.txt
    Alias /sitemap.xml {{ data_root }}/static/sitemap.xml
    Alias /favicon.ico {{ data_root }}/static/theme/img/favicons/favicon.ico

    # Make sure we send Expires and Cache-control headers for
    # static & media content.
    <Location /media/>
        ExpiresDefault "access plus 1 year"
        ExpiresActive On
    </Location>
    <Location /static/>
        ExpiresDefault "access plus 1 year"
        ExpiresActive On
    </Location>

    <Directory {{ data_root }}>
        Options -Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        Allow from all
    </Directory>

    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>
    ProxyRequests off

    # Route to varnish, except for some static assets
    SetEnv proxy-nokeepalive 1
    SetEnv force-proxy-request-1.0
    
    ProxyPass /static/ !
    ProxyPass /media/ !
    ProxyPass /robots.txt !
    ProxyPass /sitemap.xml !
    ProxyPass /favicon.ico !
    ProxyPass / http://127.0.0.1:6081/

    ProxyPassReverse /static/ !
    ProxyPassReverse /media/ !
    ProxyPassReverse /static/ !
    ProxyPassReverse /robots.txt !
    ProxyPassReverse /sitemap.xml !
    ProxyPassReverse /favicon.ico !
    ProxyPassReverse / http://127.0.0.1:6081/

    RequestHeader set X-Forwarded-Proto "https"

    CustomLog /var/log/apache2/access.log combined

</VirtualHost>
