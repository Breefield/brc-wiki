# LocalWiki Apache config file
# After modifying and saving, you may need to run these commands:
#     $ sudo a2ensite example.com
#     $ sudo /etc/init.d/apache2 reload

<VirtualHost *:8084>

    ServerAdmin {{ server_admin_email }}

    WSGIDaemonProcess localwiki processes=2 threads=15 maximum-requests=10000 user=www-data group=www-data display-name=%{GROUP}
    WSGIProcessGroup localwiki
    # For API Authorization header support
    WSGIPassAuthorization On

    WSGIScriptAlias / {{ localwiki_root }}/localwiki.wsgi

    CustomLog /var/log/apache2/access.log combined
    
    SetEnv no-gzip  # Doesn't play well with Varnish:
    #  If the content is gzip'ed, then Varnish won't add a Content-Length
    #  header, which means KeepAlive effectively won't work. Bad. So we
    #  only do gziping when the response comes /out/ of apache at the
    #  very end here (*:443 VirtualHost below).

    KeepAlive Off

</VirtualHost>

# Redirect HTTP -> HTTPS
<VirtualHost *:80>
    ServerName {{ public_hostname }}
    ServerAlias www.{{ public_hostname }}
    ServerAlias *.{{ public_hostname }}
    

    ServerAdmin {{ server_admin_email }}

    # Redirect www -> no-www
    RewriteEngine on
    RewriteCond %{HTTPS} off
    RewriteRule (.*) https://{{ public_hostname }}%{REQUEST_URI} [R=301]
</VirtualHost>

# Redirect HTTP -> HTTPS for wonky custom domains
{% for domain in custom_domains %}
<VirtualHost *:80>
    ServerName {{ domain }}
    ServerAlias www.{{ domain }}
    ServerAlias *.{{ domain }}
    

    ServerAdmin {{ server_admin_email }}

    # Redirect www -> no-www
    RewriteEngine on
    RewriteCond %{HTTPS} off
    RewriteRule (.*) https://{{ domain }}%{REQUEST_URI} [R=301]
</VirtualHost>
{% endfor %}

<VirtualHost *:443>
    # Virtualhost for routing to either:
    #   1) Static assets, served via apache directly.
    #   2) Application URLs, proxied to varnish first.
    #      a) Varnish will then use localhost:8084
    #         to get the application content.
    
    ServerName {{ public_hostname }}
    ServerAlias www.{{ public_hostname }}
    ServerAlias *.{{ public_hostname }}
    
    Include extra-conf/localwiki_certs.conf
    Include conf.d/main_router.conf

    ServerAdmin {{ server_admin_email }}

    # Enable this if your want HSTS (recommended, but be careful)
    # Header add Strict-Transport-Security "max-age=15768000"
</VirtualHost>

{% for domain in custom_domains %}
<VirtualHost *:443>
    # Virtualhost for routing to either:
    #   1) Static assets, served via apache directly.
    #   2) Application URLs, proxied to varnish first.
    #      a) Varnish will then use localhost:8084
    #         to get the application content.
    
    ServerName {{ domain }}
    ServerAlias www.{{ domain }}
    ServerAlias *.{{ domain }}
   
    # Assume that these are named according to the domain and in extra-ssl
    SSLCertificateFile /etc/apache2/extra-ssl/{{ domain }}/{{ domain }}.crt
    SSLCertificateKeyFile /etc/apache2/extra-ssl/{{ domain }}/{{ domain }}.key
    {% if ssl_intermediate %}SSLCACertificateFile /etc/apache2/extra-ssl/{{ domain }}/{{ ssl_intermediate }}{% endif %}

    Include conf.d/main_router.conf

    ServerAdmin {{ server_admin_email }}

    # Enable this if your want HSTS (recommended, but be careful)
    # Header add Strict-Transport-Security "max-age=15768000"
</VirtualHost>
{% endfor %}
